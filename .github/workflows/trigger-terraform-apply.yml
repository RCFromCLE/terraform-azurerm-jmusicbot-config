name: trigger-terraform-apply

on:
  schedule:
    - cron: '30 5 * * *'  # Run daily at 5:30 AM UTC
  workflow_dispatch:  # Keep manual trigger option

env:
  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
  TF_WORKSPACE_NAME: ${{ secrets.TF_WORKSPACE_NAME }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_VM_NAME: ${{ secrets.AZURE_VM_NAME }}
  MODULE_REPO: RCFromCLE/terraform-azurerm-jmusicbot

jobs:
  check-and-apply:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Check for new module release
        id: check_release
        run: |
          module_latest_release=$(curl -s https://api.github.com/repos/${{ env.MODULE_REPO }}/releases/latest | jq -r .tag_name)
          echo "Latest module release: $module_latest_release"
          current_version=$(grep 'version = ' main.tf | sed 's/.*version = "\(.*\)".*/\1/')
          echo "Current version: $current_version"
          if [ "$module_latest_release" != "$current_version" ]; then
            echo "new_release=true" >> $GITHUB_OUTPUT
            echo "latest_version=$module_latest_release" >> $GITHUB_OUTPUT
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
            echo "No new release found. Exiting workflow."
          fi

      - name: Update main.tf
        if: steps.check_release.outputs.new_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          sed -i 's/version = "[0-9.]*"/version = "${{ steps.check_release.outputs.latest_version }}"/' main.tf
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add main.tf
          git commit -m "Update module version to ${{ steps.check_release.outputs.latest_version }}"
          git push https://RCFromCLE:${{ secrets.PAT_TOKEN }}@github.com/RCFromCLE/terraform-azurerm-jmusicbot-config.git

      - name: Update variables.tf
        if: steps.check_release.outputs.new_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          new_jar_path="JMusicBot-${{ steps.check_release.outputs.latest_version }}.jar"
          sed -i 's/default\s*=\s*"JMusicBot-.*\.jar"/default = "'$new_jar_path'"/' variables.tf
          git add variables.tf
          git commit -m "Update jar_path in variables.tf to $new_jar_path"
          git push https://RCFromCLE:${{ secrets.PAT_TOKEN }}@github.com/RCFromCLE/terraform-azurerm-jmusicbot-config.git
          
      - name: Azure Login
        if: steps.check_release.outputs.new_release == 'true'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check Initial VM Power State
        if: steps.check_release.outputs.new_release == 'true'
        id: check_initial_state
        run: |
          echo "Checking initial VM power state..."
          VM_STATE=$(az vm get-instance-view \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --name "$AZURE_VM_NAME" \
            --query instanceView.statuses[1].displayStatus \
            -o tsv)
          echo "Initial VM Power State: $VM_STATE"
          echo "initial_state=$VM_STATE" >> $GITHUB_OUTPUT

          if [ "$VM_STATE" != "VM running" ]; then
            echo "Starting VM..."
            az vm start --resource-group "$AZURE_RESOURCE_GROUP" --name "$AZURE_VM_NAME"
            echo "Waiting for VM to be in running state..."
            while [ "$VM_STATE" != "VM running" ]; do
              sleep 30
              VM_STATE=$(az vm get-instance-view \
                --resource-group "$AZURE_RESOURCE_GROUP" \
                --name "$AZURE_VM_NAME" \
                --query instanceView.statuses[1].displayStatus \
                -o tsv)
              echo "Current VM state: $VM_STATE"
            done
            echo "VM is now running."
          fi

      - name: Terraform Login
        if: steps.check_release.outputs.new_release == 'true'
        run: |
          echo ${{ secrets.TF_API_TOKEN }} | terraform login -token-stdin

      - name: Initialize Terraform
        if: steps.check_release.outputs.new_release == 'true'
        run: terraform init

      - name: Apply Terraform Configuration
        if: steps.check_release.outputs.new_release == 'true'
        run: terraform apply -auto-approve

      - name: Get Workspace ID
        if: steps.check_release.outputs.new_release == 'true'
        id: workspace
        run: |
          echo "Getting Terraform Cloud Workspace ID..."
          WORKSPACE_ID=$(curl \
            --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            https://app.terraform.io/api/v2/organizations/${TF_CLOUD_ORGANIZATION}/workspaces/${TF_WORKSPACE_NAME} \
            | jq -r '.data.id')
          echo "Workspace ID: $WORKSPACE_ID"
          echo "id=$WORKSPACE_ID" >> $GITHUB_OUTPUT

      - name: Trigger Terraform Apply
        if: steps.check_release.outputs.new_release == 'true'
        id: apply
        run: |
          echo "Triggering Terraform Apply..."
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data '{
              "data": {
                "type": "runs",
                "attributes": {
                  "is-destroy": false,
                  "message": "Triggered by GitHub Actions - New module version ${{ steps.check_release.outputs.latest_version }}",
                  "auto-apply": true,
                  "refresh": true,
                  "replace-addrs": ["module.jmusicbot.azurerm_virtual_machine_extension.run_jdiscordbot"]
                },
                "relationships": {
                  "workspace": {
                    "data": {
                      "type": "workspaces",
                      "id": "${{ steps.workspace.outputs.id }}"
                    }
                  }
                }
              }
            }' \
            https://app.terraform.io/api/v2/runs)

          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')

          if [ "$HTTP_STATUS" -eq 201 ]; then
            echo "Terraform apply triggered successfully."
            RUN_ID=$(echo "$BODY" | jq -r '.data.id')
            echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          else
            echo "Failed to trigger Terraform apply. HTTP status: $HTTP_STATUS"
            echo "Error message: $(echo "$BODY" | jq -r '.errors[0].title')"
            exit 1
          fi

      - name: Monitor Terraform Apply Status
        if: steps.check_release.outputs.new_release == 'true'
        run: |
          echo "Monitoring Terraform Apply status..."
          while true; do
            STATUS=$(curl \
              --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
              --header "Content-Type: application/vnd.api+json" \
              https://app.terraform.io/api/v2/runs/${{ steps.apply.outputs.run_id }} \
              | jq -r '.data.attributes.status')

            echo "Current status: $STATUS"

            if [ "$STATUS" = "applied" ]; then
              echo "SUCCESS: Terraform apply completed successfully."
              break
            elif [ "$STATUS" = "errored" ] || [ "$STATUS" = "canceled" ] || [ "$STATUS" = "discarded" ]; then
              echo "ERROR: Terraform apply failed with status: $STATUS"
              exit 1
            fi

            sleep 30
          done

      - name: Restore Initial VM Power State
        if: steps.check_release.outputs.new_release == 'true' && steps.check_initial_state.outputs.initial_state != 'VM running'
        run: |
          echo "Restoring VM to initial power state (powering off)..."
          az vm deallocate --resource-group "$AZURE_RESOURCE_GROUP" --name "$AZURE_VM_NAME"
          echo "VM powered off."
