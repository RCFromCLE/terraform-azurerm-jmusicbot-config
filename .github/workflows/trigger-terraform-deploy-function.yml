name: Trigger Terraform and Deploy Function

on:
  repository_dispatch:
    types: [module-updated]
  workflow_dispatch:

env:
  TF_CLOUD_ORGANIZATION: ${{ secrets.TF_CLOUD_ORGANIZATION }}
  TF_WORKSPACE_NAME: ${{ secrets.TF_WORKSPACE_NAME }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_VM_NAME: ${{ secrets.AZURE_VM_NAME }}

jobs:
  trigger_and_monitor_terraform:
    runs-on: ubuntu-latest
    outputs:
      apply_success: ${{ steps.check_apply.outputs.success }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check VM Power State
        run: |
          echo "Checking VM power state..."
          if [ -z "$AZURE_RESOURCE_GROUP" ] || [ -z "$AZURE_VM_NAME" ]; then
            echo "ERROR: AZURE_RESOURCE_GROUP or AZURE_VM_NAME is not set."
            exit 1
          fi
          VM_STATE=$(az vm get-instance-view \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --name "$AZURE_VM_NAME" \
            --query instanceView.statuses[1].displayStatus \
            -o tsv)
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to get VM state. Please check your resource group and VM name."
            exit 1
          fi
          echo "VM Power State: $VM_STATE"
          if [ "$VM_STATE" != "VM running" ]; then
            echo "Warning: VM is not in 'running' state. Current state: $VM_STATE"
            echo "Attempting to start the VM..."
            az vm start --resource-group "$AZURE_RESOURCE_GROUP" --name "$AZURE_VM_NAME"
            echo "Waiting for VM to be in running state..."
            while [ "$VM_STATE" != "VM running" ]; do
              sleep 30
              VM_STATE=$(az vm get-instance-view \
                --resource-group "$AZURE_RESOURCE_GROUP" \
                --name "$AZURE_VM_NAME" \
                --query instanceView.statuses[1].displayStatus \
                -o tsv)
              echo "Current VM state: $VM_STATE"
            done
            echo "VM is now running."
          fi

      - name: Get Workspace ID
        id: workspace
        run: |
          echo "Getting Terraform Cloud Workspace ID..."
          WORKSPACE_ID=$(curl \
            --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            https://app.terraform.io/api/v2/organizations/${TF_CLOUD_ORGANIZATION}/workspaces/${TF_WORKSPACE_NAME} \
            | jq -r '.data.id')
          echo "Workspace ID: $WORKSPACE_ID"
          echo "::set-output name=id::$WORKSPACE_ID"

      - name: Taint Resource
        run: |
          echo "Tainting resource: module.jmusicbot.azurerm_virtual_machine_extension.run_jdiscordbot"
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data '{
              "data": {
                "type": "runs",
                "attributes": {
                  "is-destroy": false,
                  "message": "Taint module.jmusicbot.azurerm_virtual_machine_extension.run_jdiscordbot",
                  "refresh": true,
                  "replace-addrs": ["module.jmusicbot.azurerm_virtual_machine_extension.run_jdiscordbot"]
                },
                "relationships": {
                  "workspace": {
                    "data": {
                      "type": "workspaces",
                      "id": "${{ steps.workspace.outputs.id }}"
                    }
                  }
                }
              }
            }' \
            https://app.terraform.io/api/v2/runs)
          
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          echo "Response body: $BODY"
          echo "HTTP status: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" -eq 201 ]; then
            echo "Resource taint initiated successfully."
            RUN_ID=$(echo "$BODY" | jq -r '.data.id')
            echo "Taint run ID: $RUN_ID"
          else
            echo "Failed to initiate resource taint. HTTP status: $HTTP_STATUS"
            echo "Error message: $(echo "$BODY" | jq -r '.errors[0].title')"
            exit 1
          fi

      - name: Trigger Terraform Apply
        id: trigger_apply
        run: |
          echo "Triggering Terraform Apply..."
          RESPONSE=$(curl \
            --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data '{"data": {"attributes": {"message": "Triggered by GitHub Actions - Update JMusicBot"}, "type":"runs", "relationships": {"workspace": {"data": {"type": "workspaces", "id": "${{ steps.workspace.outputs.id }}"}}}}}' \
            https://app.terraform.io/api/v2/runs)
          RUN_ID=$(echo $RESPONSE | jq -r '.data.id')
          echo "Terraform Run ID: $RUN_ID"
          echo "::set-output name=run_id::$RUN_ID"

      - name: Check Terraform Apply Status
        id: check_apply
        run: |
          echo "Monitoring Terraform Apply status..."
          start_time=$(date +%s)
          timeout=600  # 10 minutes timeout
          while true; do
            current_time=$(date +%s)
            if [ $((current_time - start_time)) -ge $timeout ]; then
              echo "ERROR: Timeout reached. Terraform apply did not complete in 10 minutes."
              echo "::set-output name=success::false"
              exit 1
            fi

            STATUS=$(curl \
              --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
              --header "Content-Type: application/vnd.api+json" \
              https://app.terraform.io/api/v2/runs/${{ steps.trigger_apply.outputs.run_id }} \
              | jq -r '.data.attributes.status')
            
            echo "Current status: $STATUS"
            
            if [ "$STATUS" = "applied" ]; then
              echo "SUCCESS: Terraform apply completed successfully."
              echo "::set-output name=success::true"
              break
            elif [ "$STATUS" = "errored" ] || [ "$STATUS" = "canceled" ] || [ "$STATUS" = "discarded" ]; then
              echo "ERROR: Terraform apply failed with status: $STATUS"
              echo "::set-output name=success::false"
              exit 1
            elif [ "$STATUS" = "planned_and_finished" ]; then
              echo "Plan finished. Initiating apply..."
              RESPONSE=$(curl -s -w "\n%{http_code}" \
                --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
                --header "Content-Type: application/vnd.api+json" \
                --request POST \
                https://app.terraform.io/api/v2/runs/${{ steps.trigger_apply.outputs.run_id }}/actions/apply)
              
              HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
              if [ "$HTTP_STATUS" -ne 200 ]; then
                echo "ERROR: Failed to apply the plan. HTTP status: $HTTP_STATUS"
                echo "Error message: $(echo "$RESPONSE" | jq -r '.errors[0].title')"
                exit 1
              fi
            fi
            
            sleep 30
          done

  deploy_function:
    needs: trigger_and_monitor_terraform
    if: needs.trigger_and_monitor_terraform.outputs.apply_success == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Deploy to Azure Functions'
        uses: Azure/functions-action@v1
        with: 
          app-name: ${{ secrets.AZURE_FUNCTION_APP_NAME }}
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
      
      - name: Deployment Result
        run: |
          if [ $? -eq 0 ]; then
            echo "SUCCESS: Azure Function deployment completed successfully."
          else
            echo "ERROR: Azure Function deployment failed."
            exit 1
          fi

      - name: Workflow Summary
        run: |
          echo "========================================"
          echo "Workflow Execution Summary:"
          echo "----------------------------------------"
          echo "1. VM Power State: Checked and ensured running"
          echo "2. Resource Taint: Completed"
          echo "3. Terraform Apply: Successful"
          echo "4. Azure Function Deployment: Successful"
          echo "========================================"
          echo "JMusicBot has been successfully updated and deployed."
